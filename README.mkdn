# Thredded [![Code Climate](https://codeclimate.com/github/jayroh/thredded/badges/gpa.svg)](https://codeclimate.com/github/jayroh/thredded) [![Travis-CI](https://api.travis-ci.org/jayroh/thredded.svg?branch=master)](https://travis-ci.org/jayroh/thredded/) [![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/jayroh/thredded?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

_Thredded_ is a Rails 4+ forum/messageboard engine. Its goal is to be as
simple and feature rich as possible.

If you're looking for variations on a theme - see [Discourse], [Forem],
[Tectura] or [Heterotic Beast]. The last two are forks from Rick Olsen
and Courtenay's [Altered Beast]. Of those it should be noted that Forem
is an engine - not a standalone app.

<a href='https://pledgie.com/campaigns/27480'><img alt='Click here to lend your support to: Thredded and make a donation at pledgie.com !' src='https://pledgie.com/campaigns/27480.png?skin_name=chrome' border='0' ></a>

<img src="http://emoji.fileformat.info/gemoji/point_up.png" width="24"> If you are so inclined, donating to the project will help aid in its development

[Discourse]: http://www.discourse.org/
[Forem]: https://www.github.com/radar/forem
[Tectura]: https://github.com/caelum/tectura
[Heterotic Beast]: https://github.com/distler/heterotic_beast
[Altered Beast]: https://www.github.com/courtenay/altered_beast

Currently only MRI Ruby 2.2+ is supported. We would love to support JRuby and Rubinius as well.

## Installation

Add the gem to your Gemfile:

```ruby
gem 'thredded', github: 'jayroh/thredded'
```

Add a thredded initializer to your parent app by running the install generator.
[The initializer] has detailed descriptions of all of the configuration options.

```ruby
rails generate thredded:install           # install the initializer
rails generate thredded:install --theme   # install initializer, views, and assets
rails generate thredded:install --help    # see all options
```

Copy the migrations over to your parent application and migrate:

```
rake thredded:install:migrations db:migrate db:test:prepare
```

Mount the thredded engine in your routes file:

```
mount Thredded::Engine => '/forum'
```

[The initializer]: https://github.com/jayroh/thredded/blob/master/lib/generators/thredded/install/templates/initializer.rb


## Background Job Requirements

This gem has several gem agnostic background jobs. Currently resque, sidekiq, delayed_job, and a threaded in-memory queue are supported thanks to [Richard Schneeman's Q gem](https://github.com/schneems/Q). The configuration detailed above allows you to specify which job queue you prefer with `Thredded.queue_backend`. The available options are one of the following symbols - `:threaded_in_memory_queue`, `:sidekiq`, `:resque`, or `:delayed_job`.

When using the threaded in-memory queue you may *optionally* update its log-level for more granular debugging with the `Thredded.queue_memory_log_level` setting.

When running the app in a test environment you may want to set your queue to run the jobs inline. In your config you may want to set the option based on environment. EG:

```ruby
Thredded.queue_inline = Rails.env.test?
```

## Get Your Parent App Ready

There are a few things you need in your app to get things looking just right.

1. Add `to_s` and `to_param` methods to your user model. The following example assumes
that there is a column in my user model called `name`:

  ```ruby
  class User < ActiveRecord::Base
    def to_s
      name
    end

    def to_param
      id # or `to_s.parameterize` if you'd like a slug
    end
  end
  ```

2. Make you, or one of your users, a super-admin so they'll have the permissions to create a new forum.

  ```
  rake thredded:superadmin[yourusername] # bash
  rake "thredded:superadmin[yourusername]" # zsh
  ```

  Two examples are given for bash and zsh. Zsh typically reserves brackets, `[]`, for other uses
  hence the wrapping with quotes. Pro-tip: did you know [you can escape the brackets by
  default](http://kinopyo.com/blog/escape-square-bracket-by-default-in-zsh/)?


## Layout, Views, Assets and everything in the view layer

The engine comes by default with a light and effective implementation of the views,
styles, and javascript. Once you mount the engine you will be presented with a "themed"
version of thredded.

If you would like to customize it -- and I am assuming you will -- the install
generator has an option to copy over all of the views and assets to your parent app for
customization - `rails g thredded:install --theme`. This will copy over, into your app,
the following files in addition to the initializer:

```
vendor/views/thredded
vendor/views/layouts/thredded.html.erb
vendor/assets/javascripts/thredded.es6
vendor/assets/javascripts/thredded
vendor/assets/stylesheets/thredded.scss
vendor/assets/stylesheets/thredded
vendor/assets/images/thredded
```

A couple of notes:

* When using route helpers in the thredded views -- eg: `new_session_path`, et al -- make
  sure to prepend `main_app` to the helper: `main_app.new_session_path` as rails engines
  like thredded will not know about those routes' existence unless explicitly told so.
* The theme layout has three content_tags available to yield - `:thredded_page_title`,
  `:thredded_page_id`, and `:thredded_javascript`. The views within thredded pass those
  up through to your layout if you would like to use them.

## Gem development dependencies

To be more clear - these are some dependencies for when you are working on *this* gem. Not for when you are implementing it into your Rails app.

* PostgreSQL & MySQL - `brew install postgres mysql`

Then, create the `thredded` database users for both MySQL and Postgres. Optional
ENV's you can use are to specify the db's - `DB=postgresql` or `DB=mysql2` - or
the user account that postgresql is running as - `PG_DAEMON_USER=$(whoami)`.

```console
$ [DB=postgresql|mysql2] [PG_DAEMON_USER=$(whoami)] script/create-db-users
```

If and when you generate new migrations for thredded there will be three database migrations and one schema dump you will want to run.

1. `DB=mysql2 bundle exec rake db:drop db:create db:migrate`
2. `DB=postgresql bundle exec rake db:drop db:create db:migrate`
3. `RAILS_ENV=test bundle exec rake db:drop db:create db:migrate`
4. `bundle exec rake db:schema:dump`

The first two, in the steps above, are to generate the db schemas for both
postgres and mysql, the third is to migrate your local test database, and the
last is to take that schema information and save it to the two schema files
(for when it tests against PG and MySql).

*Or*, use the included script (it's got all that good stuff in it)

```console
$ script/migrate
```

Finally, run the development server with either `DB=postgresql` or `DB=mysql2`:

```console
$ DB=postgresql rake dev:server
```

## Developing and Testing with [Docker Compose](http://docs.docker.com/compose/)

To quickly try out _Thredded_ with the included dummy app, clone the source and
start the included docker-compose.yml file with:

```
docker-compose build
docker-compose up -d
```

The above will build and run everything, daemonized, resulting in a running
instance on port 9292. Running `docker-compose logs` will let you know when
everything is up and running. Editing the source on your host machine will
be reflected in the running docker'ized application.

Note that when using [boot2docker](https://github.com/boot2docker/boot2docker)
on a Mac make sure you visit the boot2docker host ip at
`http://$(boot2docker ip):9292`.

After booting up the containers you can run the test suite with the following:

```console
docker-compose run web bundle exec rake
```

